# -*- coding: utf-8 -*-
"""visionwishper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13xrrFJyWFKPtCUWb1ttL-UpSooaQ8PFW
"""



"""#VisionWishper
---

>_An AI-Powered Image and Speech Recognition System_

###Project Overview
---
In this project, a Python-based image and speech recognition system will be developed.<br> The system will identify and categorize objects in images (such as people, cars, fruits, and other objects) using OpenCV and TensorFlow. <br>It will work in conjunction with ChatGPT to provide users with comprehensive details about the identified objects, which they can download as a PDF.<br> Prior to creating the PDF, users will have the option to modify the prompt.
<br>



##key features of Visionwishper :
---

<body>
    <h1></h1>
    <table>
        <tr>
            <th>Feature</th>
            <th>Description</th>
        </tr>
        <tr>
            <td>Image Recognition</td>
            <td>
                <strong>Capture Image:</strong> Capture an image using a webcam or upload an image file<br>
                <strong>Preprocessing:</strong> Apply preprocessing techniques such as resizing, normalization, and data augmentation<br>
                <strong>Object Detection:</strong> Train a model to detect and categorize objects<br>
                <strong>Object Classification:</strong> Classify detected objects into categories like human, car, fruits, and others
            </td>
        </tr>
        <tr>
            <td>Speech Recognition</td>
            <td>
                <strong>Capture Audio:</strong> Capture an audio input using a microphone or upload an audio file<br>
                <strong>Preprocessing:</strong> Convert audio input to text using speech recognition techniques<br>
                <strong>Command Processing:</strong> Process commands related to image capture, object identification, and PDF generation
            </td>
        </tr>
        <tr>
            <td>Integration with ChatGPT</td>
            <td>
                <strong>Query Generation:</strong> Generate queries based on identified objects<br>
                <strong>ChatGPT Response:</strong> Get detailed information about the objects from ChatGPT<br>
                <strong>Prompt Editing:</strong> Allow users to edit the prompt before downloading
            </td>
        </tr>
        <tr>
            <td>PDF Generation</td>
            <td>
                <strong>Content Compilation:</strong> Compile the detailed information into a structured format<br>
                <strong>PDF Creation:</strong> Create a PDF file with the compiled information<br>
                <strong>Download Option:</strong> Provide an option for users to download the generated PDF
            </td>
        </tr>
    </table>
</body>
</html>

###Importing Necessary Libraries
---
<table>
    <tr>
        <th>Library</th>
        <th>Description</th>
        <th>Import Statement</th>
    </tr>
    <tr>
        <td>OpenCV</td>
        <td>Used for image processing and recognition</td>
        <td><code>import cv2</code></td>
    </tr>
    <tr>
        <td>TensorFlow</td>
        <td>Used for building and deploying machine learning models</td>
        <td><code>import tensorflow as tf</code></td>
    </tr>
    <tr>
        <td>ChatGPT API</td>
        <td>Used for getting detailed information about the objects</td>
        <td><code>import openai</code></td>
    </tr>
    <tr>
        <td>SpeechRecognition</td>
        <td>Used for converting speech input to text</td>
        <td><code>import speech_recognition as sr</code></td>
    </tr>
    <tr>
        <td>PyPDF2</td>
        <td>Used for creating and manipulating PDF files</td>
        <td><code>from PyPDF2 import PdfFileWriter, PdfFileReader</code></td>
    </tr>
</table>
 </code></td>
    </tr>
</table>

<br>

###Functional Requirements
---
###1. Image Recognition
- **Capture Image** : Capture an image using a webcam or upload an image file in the format .Png, .jpg
<br>
- **Preprocessing** : Apply preprocessing techniques such as resizing, normalization, and data augmentation
 <br>
- **Normalize** : Adjusts the range of pixel intensity values to a standard scale (e.g., 0 to 1 or -1 to 1) for consistent processing and to improve model convergence.<br>
- **Resize** : Resizes images to a specified dimension (e.g., to fit model input requirements or for consistency in processing).<br>
- **Data Augmentation** : Generates new training samples by applying transformations like rotations, translations, flips, zooms, etc., to increase model robustness and performance.<br>
- **Object Detection** : Train a model to detect and categorize objects<br>
- **Object Classification** : Classify detected objects into categories like human, car, fruits, and others<br>

###2. Speech Recognition

***Capture Audio** : Capture an audio input using a microphone or upload an audio file<br>
- **Preprocessing** : Convert audio input to text using speech recognition techniques
- **Audio Normalization** : Adjusts the amplitude of audio signals to a standard level, ensuring consistent volume levels.
<br>
- **Noise Reduction** : Filters out background noise from audio signals, improving the clarity of speech recognition.
<br>
- **Feature Extraction** : Converts raw audio signals into representative features like Mel-Frequency Cepstral Coefficients (MFCCs) or spectrograms, suitable for model training.
<br>
- **Command Processing** : Process commands related to image capture, object identification, and PDF generation<br>

###3. Integration with ChatGPT<br>
- **Query Generation** : Generate queries based on identified objects
- **generate_query()** : Generates a query string based on a list of identified objects.
- **ChatGPT Response** : Get detailed information about the objects from ChatGPT
- **get_chatgpt_response()** : Gets detailed information about the objects from ChatGPT using the generated query.

- **Prompt Editing** : Allow users to edit the prompt before downloading
- **edit_prompt(prompt)** : Allows users to edit the generated prompt before downloading or further processing.
PDF Generation

###4. PDF Generation
- **Content Compilation** : Compile the detailed information into a structured format
- **compile_information(info)** : Compiles detailed information into a structured format for further processing or display.
- **PDF Creation** : Create a PDF file with the compiled information
- **create_pdf(content)** : Creates a PDF file with the compiled information.
- **Download Option** : Provide an option for users to download the generated PDF
    - **Export**  : Provides an option for users to download the generated PDF.

###Technical Requirements
---
- **Hardware Requirements**<br>
   - **Camera** : For capturing images
   - **Microphone** : For capturing audio input
   - **Computer/Server** : To run the application and process the data

   
###Project Phases
---
1.**Project Initialization**
- Define project scope and objectives
- Set up development environment<br>

2.**Image Recognition Module**
- Implement image capture functionality
- Apply preprocessing techniques
- Develop object detection and classification models<br>

3.**Speech Recognition Module**
- Implement audio capture functionality
- Convert speech to text using speech recognition
- Develop command processing logic<br>

4.**Integration with ChatGPT**
- Set up the ChatGPT API
- Implement query generation based on identified objects
- Integrate ChatGPT response into the application
- Implement prompt editing functionality<br>

5.**PDF Generation**
- Develop functionality to compile information into a structured format
- Implement PDF creation and download options<br>
"""

